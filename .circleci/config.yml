version: 2.1

jobs:
  say-hello:
    docker:
      - image: cimg/base:current

    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  check-branch-status:
    docker:
      - image: cimg/base:current
    
    steps:
      - checkout
      - run:
          name: "Install jq"
          command: |
            sudo apt-get update
            sudo apt-get install -y jq
      - run:
          name: "Get task token from socket"
          command: |
            TASK_TOKEN_SOCKET="/tmp/circleci-ts.sock"
            
            if [ ! -S "$TASK_TOKEN_SOCKET" ]; then
              echo "ERROR: Task token socket not found at $TASK_TOKEN_SOCKET"
              exit 1
            fi
            
            SOCKET_RESPONSE=$(echo "get_token" | nc -U "$TASK_TOKEN_SOCKET")
            
            if [ -z "$SOCKET_RESPONSE" ]; then
              echo "ERROR: Failed to get response from socket"
              exit 1
            fi
            
            if ! echo "$SOCKET_RESPONSE" | jq empty 2>/dev/null; then
              echo "ERROR: Invalid JSON response from socket"
              echo "Response: $SOCKET_RESPONSE"
              exit 1
            fi
            
            TASK_TOKEN=$(echo "$SOCKET_RESPONSE" | jq -r '.token')
            
            if [ -z "$TASK_TOKEN" ] || [ "$TASK_TOKEN" = "null" ]; then
              echo "ERROR: No task token in socket response"
              exit 1
            fi
            
            echo "Task token obtained"
            echo "TASK_TOKEN=$TASK_TOKEN" >> $BASH_ENV
      - run:
          name: "Exchange task token for CircleCI token"
          command: |
            echo "Exchanging task token for CircleCI token..."
            CIRCLE_TOKEN_RESPONSE=$(curl -s -X POST \
              -H "Authorization: bearer $TASK_TOKEN" \
              "https://circleci.com/api/v2/user/access-token")
            
            if ! echo "$CIRCLE_TOKEN_RESPONSE" | jq empty 2>/dev/null; then
              echo "ERROR: Failed to exchange task token for token"
              echo "Response: $CIRCLE_TOKEN_RESPONSE"
              exit 1
            fi
            
            CIRCLE_TOKEN=$(echo "$CIRCLE_TOKEN_RESPONSE" | jq -r '.token')
            
            if [ -z "$CIRCLE_TOKEN" ] || [ "$CIRCLE_TOKEN" = "null" ]; then
              echo "ERROR: Invalid CircleCI token in response"
              exit 1
            fi
            
            echo "CircleCI token obtained"
            echo "CIRCLE_TOKEN=$CIRCLE_TOKEN" >> $BASH_ENV
      - run:
          name: "Get and check main branch pipeline"
          command: |
            echo "Getting main branch pipeline..."
            MAIN_BRANCH_RESP=$(curl -s -H "Circle-Token: $CIRCLE_TOKEN" \
              "https://circleci.com/api/v2/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pipeline?branch=main")
            
            if ! echo "$MAIN_BRANCH_RESP" | jq empty 2>/dev/null; then
              echo "API error: $MAIN_BRANCH_RESP"
              exit 1
            fi
                      
            if ! echo "$MAIN_BRANCH_RESP" | jq -e '.items' > /dev/null 2>&1; then
              echo "ERROR: Invalid response format - no items array"
              exit 1
            fi
            
            ITEMS_COUNT=$(echo "$MAIN_BRANCH_RESP" | jq '.items | length' 2>/dev/null || echo "0")
            
            if [ "$ITEMS_COUNT" -eq 0 ]; then
              echo "[SUCCESS] No pipelines found for main branch - treating as clean state"
              exit 0
            fi
            
            LATEST_PIPELINE=$(echo "$MAIN_BRANCH_RESP" | jq -r '.items[0]')
            
            if [ "$LATEST_PIPELINE" = "null" ] || [ -z "$LATEST_PIPELINE" ]; then
              echo "ERROR: Latest pipeline is null or empty"
              exit 1
            fi
            
            PIPELINE_STATE=$(echo "$LATEST_PIPELINE" | jq -r '.state')
            PIPELINE_ID=$(echo "$LATEST_PIPELINE" | jq -r '.id')
            
            echo "Latest main pipeline: $PIPELINE_ID - State: $PIPELINE_STATE"
            
            if [ -z "$PIPELINE_STATE" ] || [ "$PIPELINE_STATE" = "null" ]; then
              echo "ERROR: Pipeline state is empty or null"
              exit 1
            fi
            
            if [ "$PIPELINE_STATE" = "success" ] || [ "$PIPELINE_STATE" = "created" ]; then
              echo "[SUCCESS] Latest main branch pipeline passed!"
              exit 0
            else
              echo "[FAILED] Latest main branch pipeline failed: $PIPELINE_STATE"
              exit 1
            fi

workflows:
  main-pipeline-check:
    jobs:
      - check-branch-status
      - say-hello:
          requires:
            - check-branch-status